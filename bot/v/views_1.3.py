#  https://habr.com/ru/sandbox/186542/ (–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –Ω–∞ Django + pyTelegramBotApi)
from django.shortcuts import HttpResponse, get_object_or_404
import telebot
from telebot import types  # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
from django.conf import settings
from bot.models import UsersBot, UserState
from main.models import MeterDev, Pokazaniya, PokazaniyaUser
from django.contrib.auth import get_user_model
from django.views.decorators.csrf import csrf_exempt
from django.db import IntegrityError
from datetime import date

User = get_user_model()

bot = telebot.TeleBot(settings.BOT_TOKEN)


##############################################
def get_state(user_id):
    state, created = UserState.objects.get_or_create(user_id=user_id)
    return state


##############################################


@csrf_exempt
def index(request):
    if request.method == "POST":
        update = telebot.types.Update.de_json(request.body.decode('utf-8'))
        bot.process_new_updates([update])
    else:
        bot.remove_webhook()
        bot.set_webhook(f'{settings.SERVER_BOT}/bot/')
    return HttpResponse(f'<h1>–¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!</h1>:{bot.get_webhook_info()}')


##############################################
@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message):
    user_id = message.from_user.id  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º id
    state = get_state(user_id)  # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    delete_messages(state, message)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    call_all_ls(state, message)
    # step 0- –æ–∂–∏–¥–∞–Ω–∏–µ –ª–∏—Ü–µ–≤–æ–≥–æ
    # step 1- –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –•–í–°
    # step 2- –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ì–í–°
    # step 3- –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≠–õ-–í–û
    # step 4- –æ–∂–∏–¥–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã


##############################################
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    user_id = call.from_user.id
    state = get_state(user_id)
    action, *data = call.data.split(':')
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    delete_messages(state, call.message)

    actions = {
        'call_add_ls': call_add_ls,
        'call_show_ls': call_show_ls,
        'call_all_ls': call_all_ls,
        'call_add_pokazaniya': call_add_pokazaniya,
        'call_del_ls': call_del_ls,
        'call_del_ls_yes': call_del_ls_yes,
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
    if action in actions:
        actions[action](state, call.message, *data)


##############################################
# FUNCTION
#############################################
def call_add_ls(state, message, *data):
    state.step = 0
    state.save()
    if settings.DEBUG:
        print(f'call_add_ls:state.user_id={state.user_id}')
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–µ –±–æ–ª–µ–µ 8 —Ü–∏—Ñ—Ä).')


#############################################
def call_all_ls(state, message):
    if settings.DEBUG:
        print(f'call_all_ls:user_id={state.user_id}')
    user_bot = UsersBot.objects.filter(user_id=state.user_id)
    keyboard = types.InlineKeyboardMarkup()
    if user_bot:
        for u_b in user_bot:
            btn_show_ls = types.InlineKeyboardButton(f"üè† {u_b.ls}-{u_b.kv}", callback_data=f'call_show_ls:'
                                                                                           f'{state.user_id}'
                                                                                           f':{u_b.ls}:'
                                                                                           f'{u_b.kv}')
            keyboard.add(btn_show_ls)
    btn_add_ls = types.InlineKeyboardButton("üîç –î–æ–±–∞–≤–∏—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç", callback_data=f'call_add_ls:{state.user_id}')

    keyboard.add(btn_add_ls)
    sent_mess = bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –õ–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, –ª–∏–±–æ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π',
                                 reply_markup=keyboard)
    state.last_message_ids.append(sent_mess.message_id)
    state.save()


#############################################
def call_show_ls(state, message, *data):
    state.ls = data[1]
    state.kv = data[2]

    state.step = 0
    if settings.DEBUG:
        print(f'call_show_ls:user_id={state.user_id},kv={state.kv}, ls={state.ls}')
    bot.send_message(message.chat.id, f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤... –æ–∂–∏–¥–∞–π—Ç–µ.")
    try:
        user = User.objects.get(ls=state.ls)
        mes = (f"–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ‚Ññ {state.ls}\n"
               f"–ê–¥—Ä–µ—Å: {user.address}\n")
        keyboard = types.InlineKeyboardMarkup()
        # —Ü–∏–∫–ª –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        mes += f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"
        for pu, pu_d in MeterDev.TYPE_SELECT:
            btn_meter = types.InlineKeyboardButton(f"{pu_d}",
                                                   callback_data=f'call_add_pokazaniya:{pu}')
            keyboard.add(btn_meter)

        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ", callback_data=f'call_all_ls')
        btn_del = types.InlineKeyboardButton("‚ùå –û—Ç–≤—è–∑–∞—Ç—å —Å—á–µ—Ç", callback_data=f'call_del_ls:{state.user_id}:{state.ls}'
                                                                              f':{state.kv}')
        keyboard.add(btn_back, btn_del)
        sent_mess = bot.send_message(message.chat.id, mes, reply_markup=keyboard)
        state.last_message_ids.append(sent_mess.message_id)

    except User.DoesNotExist:
        bot.send_message(message.chat.id, f"–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ‚Ññ {state.ls} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    state.save()


#############################################
def call_add_pokazaniya(state, message, *data):
    pu_type = data[0]
    if settings.DEBUG:
        print(f'call_add_pokazaniya:user_id={state.user_id},kv={state.kv},pu_type={pu_type}, ls={state.ls}')
    if pu_type == 'hv':
        state.step = 1
    elif pu_type == 'gv':
        state.step = 2
    elif pu_type == 'e':
        state.step = 3

    p = []
    try:
        pokaz_dev = list(Pokazaniya.objects.filter(kv=state.kv).order_by("-date").values())
        if pokaz_dev:
            p = pokaz_dev[0]
    except Pokazaniya.DoesNotExist:
        bot.send_message(message.chat.id, f'–ü–æ–∫–∞–∑–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    keyboard = types.InlineKeyboardMarkup()
    date_mess = p['date'].strftime('%d.%m.%Y')
    type_display = dict(MeterDev.TYPE_SELECT).get(pu_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
    mes = (f'–ü—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞:{type_display}\n'
           f'–ü—Ä–µ–¥—ã–¥—É—â–∏–µ:{p[pu_type]} ({date_mess})\n'
           f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –Ω–∏–∂–µ :')
    btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å—á–µ—Ç—á–∏–∫–æ–≤", callback_data=f'call_show_ls:'
                                                                                         f'{state.user_id}:'
                                                                                         f'{state.ls}:{state.kv}')
    keyboard.add(btn_back)
    sent_mess = bot.send_message(message.chat.id, mes, reply_markup=keyboard)
    state.last_message_ids.append(sent_mess.message_id)
    state.save()


#############################################
def call_del_ls(state, message, *data):
    ls = data[1]
    kv = data[2]
    if settings.DEBUG:
        print(f'call_del_ls:user_id={state.user_id},ls={ls},kv={kv}')
    try:
        user = User.objects.get(ls=ls)
    except User.DoesNotExist:
        bot.send_message(message.chat.id, f"–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ‚Ññ {ls} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    keyboard = types.InlineKeyboardMarkup()
    btn_yes = types.InlineKeyboardButton("–î–∞", callback_data=f'call_del_ls_yes:{state.user_id}:{ls}:{kv}')
    btn_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f'call_show_ls:{state.user_id}:{ls}:{kv}')
    keyboard.add(btn_yes, btn_no)
    sent_mess = bot.send_message(message.chat.id, f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç?\n'
                                                  f'–°—á–µ—Ç ‚Ññ {ls}\n'
                                                  f'–ê–¥—Ä–µ—Å: {user.address}',
                                 reply_markup=keyboard)
    state.last_message_ids.append(sent_mess.message_id)
    state.save()


#############################################
def call_del_ls_yes(state, message, *data):
    ls = data[1]
    kv = data[2]
    if settings.DEBUG:
        print(f'call_del_ls_yes:user_id={state.user_id},ls={ls},kv={kv}')
    try:
        u = UsersBot.objects.get(user_id=state.user_id, ls=ls)
        u.delete()
        bot.send_message(message.chat.id, f'–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ‚Ññ{ls} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω!')
        if settings.DEBUG:
            print(f"del_yes:{state.user_id}")
        call_all_ls(state, message)
    except UsersBot.DoesNotExist:
        bot.send_message(message.chat.id, f"–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ‚Ññ {ls} –Ω–µ –Ω–∞–π–¥–µ–Ω!")


#############################################
def delete_messages(state, message):
    if state.last_message_ids:
        for lst in state.last_message_ids:
            try:
                bot.delete_message(message.chat.id, lst)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        state.last_message_ids.clear()


##############################################
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def func(message):
    state = get_state(message.from_user.id)
    if state.step == 0:
        if len(message.text) == 8:
            try:
                state.ls = int(message.text)
                bot.send_message(message.chat.id,
                                 text="–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–µ –±–æ–ª–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤).")
                state.step = 4
                state.save()
            except ValueError:
                bot.send_message(message.chat.id,
                                 text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –µ—â–µ —Ä–∞–∑")

        else:
            bot.send_message(message.chat.id,
                             text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –µ—â–µ —Ä–∞–∑")
    elif state.step == 1:
        if 1 <= len(message.text) <= 8:  # –¥–ª–∏–Ω–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
            try:
                val = int(message.text)
                bot.send_message(message.chat.id,
                                 text=f"–í–≤–µ–¥–µ–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–∏–µ: {val}... –æ–∂–∏–¥–∞–π—Ç–µ")
                try:
                    req = PokazaniyaUser.objects.filter(date=date.today(), kv=state.kv)
                    if req:
                        req.update(hv=val)
                    else:
                        PokazaniyaUser.objects.create(kv=state.kv, hv=val)
                except IntegrityError:
                    print("–û—à–∏–±–∫–∞")
                bot.send_message(message.chat.id,
                                 text=f"–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã —É—Å–ø–µ—à–Ω–æ!")
                data = [state.user_id, state.ls, state.kv]
                call_show_ls(state, message, *data)
            except ValueError:
                bot.send_message(message.chat.id,
                                 text="–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        else:
            bot.send_message(message.chat.id,
                             text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    elif state.step == 2:
        if 1 <= len(message.text) <= 8:  # –¥–ª–∏–Ω–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
            try:
                val = int(message.text)
                bot.send_message(message.chat.id,
                                 text=f"–í–≤–µ–¥–µ–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–∏–µ: {val}... –æ–∂–∏–¥–∞–π—Ç–µ")
                try:
                    req = PokazaniyaUser.objects.filter(date=date.today(), kv=state.kv)
                    if req:
                        req.update(gv=val)
                    else:
                        PokazaniyaUser.objects.create(kv=state.kv, gv=val)
                except IntegrityError:
                    print("–û—à–∏–±–∫–∞")
                bot.send_message(message.chat.id,
                                 text=f"–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã —É—Å–ø–µ—à–Ω–æ!")
                data = [state.user_id, state.ls, state.kv]
                call_show_ls(state, message, *data)
            except ValueError:
                bot.send_message(message.chat.id,
                                 text="–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        else:
            bot.send_message(message.chat.id,
                             text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    elif state.step == 3:
        if 1 <= len(message.text) <= 8:  # –¥–ª–∏–Ω–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
            try:
                val = int(message.text)
                bot.send_message(message.chat.id,
                                 text=f"–í–≤–µ–¥–µ–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–∏–µ: {val}... –æ–∂–∏–¥–∞–π—Ç–µ")
                try:
                    req = PokazaniyaUser.objects.filter(date=date.today(), kv=state.kv)
                    if req:
                        req.update(e=val)
                    else:
                        PokazaniyaUser.objects.create(kv=state.kv, e=val)
                except IntegrityError:
                    print("–û—à–∏–±–∫–∞")
                bot.send_message(message.chat.id,
                                 text=f"–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã —É—Å–ø–µ—à–Ω–æ!")
                data = [state.user_id, state.ls, state.kv]
                call_show_ls(state, message, *data)
            except ValueError:
                bot.send_message(message.chat.id,
                                 text="–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        else:
            bot.send_message(message.chat.id,
                             text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    elif state.step == 4:
        if 1 <= len(message.text) <= 3:
            try:
                state.kv = int(message.text)
                state.save()
            except ValueError:
                bot.send_message(message.chat.id,
                                 text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—â–µ —Ä–∞–∑")

            if state.ls and state.kv:
                bot.send_message(message.chat.id, text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –ø–æ–∏—Å–∫ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞..")
                u = User.objects.filter(ls=state.ls, kv=state.kv)
                if u:
                    # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–≥—Ä–∞–º user –∏ –ª–∏—Ü–µ–≤–æ–π
                    try:
                        if UsersBot.objects.filter(ls=state.ls, user_id=state.user_id):
                            bot.send_message(message.chat.id,
                                             text=f"‚õî –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
                        else:
                            if message.from_user.username:
                                UsersBot.objects.create(user_id=state.user_id,
                                                        username=message.from_user.username,
                                                        ls=state.ls,
                                                        kv=state.kv)
                            else:
                                UsersBot.objects.create(user_id=state.user_id,
                                                        ls=state.ls,
                                                        kv=state.kv)
                            bot.send_message(message.chat.id, text=f"–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ‚Ññ{state.ls} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
                            state.save()
                    except Exception as e:
                        bot.send_message(message.chat.id, text=f"–û—à–∏–±–∫–∞... {e}.")
                    state.step = 10
                    state.save()
                    call_all_ls(state, message)
                else:
                    bot.send_message(message.chat.id,
                                     text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å –¢–°–ù")
                    state.step = 10
                    state.save()
                    call_all_ls(state, message)
        else:
            bot.send_message(message.chat.id,
                             text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—â–µ —Ä–∞–∑")
    else:
        bot.send_message(message.chat.id,
                         text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É!")
        delete_messages(state, message)
        call_all_ls(state, message)
